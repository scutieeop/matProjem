<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz ve Çizim Tahtası</title>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #047857;
            --secondary-color: #10b981;
            --bg-gradient: linear-gradient(135deg, #047857 0%, #10b981 100%);
            --background-color: #f0f7f4;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: var(--background-color);
            min-height: 100vh;
            line-height: 1.6;
            overflow-x: hidden;
        }

        .gradient-header {
            background: var(--bg-gradient);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
            clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
            padding: 40px 0;
            margin-bottom: 30px;
            color: white;
        }

        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            display: flex;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            width: 90%;
            max-width: 1200px;
            margin: -60px auto 40px;
            padding: 30px;
            position: relative;
            transform: perspective(1000px);
            transition: all 0.4s ease;
        }

        .container:hover {
            transform: scale(1.01) rotateX(1deg);
        }

        .quiz-container {
            flex: 2;
            padding-right: 30px;
        }

        .quiz-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .quiz-title {
            color: var(--primary-color);
            font-size: 2.2rem;
            font-weight: bold;
        }

        .question-card {
            background-color: white;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.05);
            transition: all 0.4s ease;
            transform: perspective(1000px);
        }

        .question-card:hover {
            transform: scale(1.035) rotateX(3deg);
            box-shadow: 0 25px 40px rgba(0,0,0,0.1);
        }

        .question-text {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 20px;
            color: #1f2937;
        }

        .option-label {
            display: block;
            padding: 12px 15px;
            border-radius: 10px;
            margin-bottom: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid #e5e7eb;
        }

        .option-label:hover {
            background-color: #f8fafc;
            border-color: var(--secondary-color);
        }

        .option-input {
            margin-right: 12px;
        }

        .whiteboard {
            flex: 1;
            background-color: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            height: 600px;
            transition: all 0.4s ease;
        }

        .whiteboard:hover {
            transform: translateY(-5px);
        }

        .submit-btn {
            width: 100%;
            padding: 15px;
            background: var(--bg-gradient);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 20px;
        }

        .submit-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(4, 120, 87, 0.2);
        }

        .navigation-btns {
            display: flex;
            justify-content: space-between;
            margin-top: 25px;
            gap: 15px;
        }

        .nav-btn {
            background-color: var(--secondary-color);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .nav-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 15px rgba(16, 185, 129, 0.2);
        }

        .whiteboard-controls {
            display: flex;
            justify-content: space-around;
            align-items: center;
            padding: 15px;
            background: var(--bg-gradient);
            gap: 10px;
        }

        .whiteboard-controls .nav-btn {
            background-color: rgba(255, 255, 255, 0.2);
            padding: 10px;
            border-radius: 8px;
        }

        .whiteboard-controls .nav-btn:hover {
            background-color: rgba(255, 255, 255, 0.3);
        }

        #drawingCanvas {
            width: 100%;
            height: calc(100% - 60px);
            cursor: crosshair;
        }

        #colorPicker {
            border: none;
            border-radius: 8px;
            overflow: hidden;
            cursor: pointer;
        }

        .grid-overlay {
            position: absolute;
            pointer-events: none;
            width: 100%;
            height: calc(100% - 60px);
            background-image: 
                linear-gradient(to right, rgba(4, 120, 87, 0.1) 1px, transparent 1px),
                linear-gradient(to bottom, rgba(4, 120, 87, 0.1) 1px, transparent 1px);
            background-size: 50px 50px;
            opacity: 0.3;
            display: none;
        }

        @media (max-width: 768px) {
            .container {
                flex-direction: column;
                width: 95%;
                padding: 20px;
            }

            .quiz-container {
                padding-right: 0;
                margin-bottom: 30px;
            }

            .whiteboard {
                height: 400px;
            }
        }
    </style>
</head>
<body>
    <div class="gradient-header">
        <div style="width: 90%; max-width: 1200px; margin: 0 auto;">
            <h1 style="font-size: 2.5rem; margin-bottom: 10px;">Merhaba, <%= username %>!</h1>
            <p style="font-size: 1.2rem; opacity: 0.9;">Quiz'e başlamaya hazır mısın?</p>
        </div>
    </div>

    <div class="container">
        <div class="quiz-container">
            <div class="quiz-header">
                <h2 class="quiz-title">Quiz Soruları</h2>
                <button id="toggleWhiteboard" class="nav-btn">
                    <i class="ri-pencil-line"></i> Tahta
                </button>
            </div>

            <form id="quizForm" action="/cevapla" method="POST">
                <% sorular.forEach((soru, index) => { %>
                <div class="question-card" id="question-<%= index %>" style="display: <%= index === 0 ? 'block' : 'none' %>">
                    <p class="question-text"><%= index + 1 %>. <%= soru.soru %></p>
                    <% soru.secenekler.forEach(secenek => { %>
                    <label class="option-label">
                        <input type="radio" name="cevap<%= soru.id %>" value="<%= secenek %>" class="option-input">
                        <%= secenek %>
                    </label>
                    <% }) %>
                </div>
                <% }) %>

                <div class="navigation-btns">
                    <button type="button" id="prevQuestion" class="nav-btn">
                        <i class="ri-arrow-left-line"></i> Önceki Soru
                    </button>
                    <button type="button" id="nextQuestion" class="nav-btn">
                        Sonraki Soru <i class="ri-arrow-right-line"></i>
                    </button>
                </div>

                <input type="hidden" name="kullaniciAdi" value="<%= username %>">
                <button type="submit" class="submit-btn">
                    Cevapları Gönder <i class="ri-send-plane-line"></i>
                </button>
            </form>
        </div>

        <div class="whiteboard" id="whiteboard">
            <div style="position: relative; width: 100%; height: 100%;">
                <div class="grid-overlay" id="gridOverlay"></div>
                <canvas id="drawingCanvas"></canvas>
            </div>
            <div class="whiteboard-controls">
                <button id="penTool" class="nav-btn" title="Kalem"><i class="ri-pencil-line"></i></button>
                <button id="eraserTool" class="nav-btn" title="Silgi"><i class="ri-eraser-line"></i></button>
                <input type="color" id="colorPicker" value="#047857" title="Renk Seç">
                <button id="gridToggle" class="nav-btn" title="Izgara"><i class="ri-grid-line"></i></button>
                <button id="clearBoard" class="nav-btn" title="Temizle"><i class="ri-delete-bin-2-line"></i></button>
            </div>
        </div>
    </div>

    <script>
        let currentQuestion = 0;
        const questions = document.querySelectorAll('.question-card');
        const prevBtn = document.getElementById('prevQuestion');
        const nextBtn = document.getElementById('nextQuestion');
        const whiteboard = document.getElementById('whiteboard');
        const toggleWhiteboardBtn = document.getElementById('toggleWhiteboard');
        const canvas = document.getElementById('drawingCanvas');
        const ctx = canvas.getContext('2d');
        const gridOverlay = document.getElementById('gridOverlay');

        // Canvas setup
        function resizeCanvas() {
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
        }

        // Question Navigation
        function showQuestion(index) {
            questions.forEach(q => q.style.display = 'none');
            questions[index].style.display = 'block';
            
            // Update navigation buttons
            prevBtn.style.opacity = index === 0 ? '0.5' : '1';
            prevBtn.disabled = index === 0;
            nextBtn.style.opacity = index === questions.length - 1 ? '0.5' : '1';
            nextBtn.disabled = index === questions.length - 1;
        }

        // Whiteboard State Variables
        let isDrawing = false;
        let currentColor = '#047857';
        let currentTool = 'pen';
        let lastX = 0;
        let lastY = 0;

        // Event Listeners for Question Navigation
        nextBtn.addEventListener('click', () => {
            if (currentQuestion < questions.length - 1) {
                currentQuestion++;
                showQuestion(currentQuestion);
            }
        });

        prevBtn.addEventListener('click', () => {
            if (currentQuestion > 0) {
                currentQuestion--;
                showQuestion(currentQuestion);
            }
        });

        // Whiteboard Toggle with Animation
        toggleWhiteboardBtn.addEventListener('click', () => {
            if (whiteboard.style.display === 'none') {
                whiteboard.style.display = 'block';
                whiteboard.style.opacity = '0';
                setTimeout(() => {
                    whiteboard.style.opacity = '1';
                    resizeCanvas();
                }, 50);
            } else {
                whiteboard.style.opacity = '0';
                setTimeout(() => {
                    whiteboard.style.display = 'none';
                }, 300);
            }
        });

        // Improved Drawing Functions
        function startDrawing(e) {
            isDrawing = true;
            [lastX, lastY] = [e.offsetX, e.offsetY];
        }

        function draw(e) {
            if (!isDrawing) return;

            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(e.offsetX, e.offsetY);
            ctx.lineWidth = currentTool === 'pen' ? 2 : 20;
            ctx.lineCap = 'round';
            ctx.strokeStyle = currentTool === 'pen' ? currentColor : '#ffffff';
            ctx.stroke();

            [lastX, lastY] = [e.offsetX, e.offsetY];
        }

        function stopDrawing() {
            isDrawing = false;
        }

        // Canvas Event Listeners
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', stopDrawing);

        // Color Picker
        document.getElementById('colorPicker').addEventListener('input', (e) => {
            currentColor = e.target.value;
            currentTool = 'pen';
        });

        // Tools with Active State
        const tools = ['penTool', 'eraserTool'];
        tools.forEach(toolId => {
            document.getElementById(toolId).addEventListener('click', (e) => {
                tools.forEach(t => document.getElementById(t).classList.remove('active'));
                e.target.closest('.nav-btn').classList.add('active');
                currentTool = toolId === 'penTool' ? 'pen' : 'eraser';
            });
        });

        // Clear Canvas with Confirmation
        document.getElementById('clearBoard').addEventListener('click', () => {
            if (confirm('Tahtayı temizlemek istediğinize emin misiniz?')) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            }
        });

        // Grid Toggle with Animation
        document.getElementById('gridToggle').addEventListener('click', (e) => {
            const button = e.target.closest('.nav-btn');
            button.classList.toggle('active');
            
            if (gridOverlay.style.display === 'none') {
                gridOverlay.style.display = 'block';
                gridOverlay.style.opacity = '0';
                setTimeout(() => {
                    gridOverlay.style.opacity = '0.3';
                }, 50);
            } else {
                gridOverlay.style.opacity = '0';
                setTimeout(() => {
                    gridOverlay.style.display = 'none';
                }, 300);
            }
        });

        // Handle Window Resize
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                resizeCanvas();
                ctx.putImageData(imageData, 0, 0);
            }, 250);
        });

        // Touch Events Support for Drawing
        function getTouchPos(canvasDom, touchEvent) {
            const rect = canvasDom.getBoundingClientRect();
            return {
                x: touchEvent.touches[0].clientX - rect.left,
                y: touchEvent.touches[0].clientY - rect.top
            };
        }

        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            const touchPos = getTouchPos(canvas, e);
            [lastX, lastY] = [touchPos.x, touchPos.y];
            startDrawing(e);
        });

        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            const touchPos = getTouchPos(canvas, e);
            const simulatedEvent = {
                offsetX: touchPos.x,
                offsetY: touchPos.y
            };
            draw(simulatedEvent);
        });

        canvas.addEventListener('touchend', stopDrawing);
        canvas.addEventListener('touchcancel', stopDrawing);

        // Form Submission Animation
        document.getElementById('quizForm').addEventListener('submit', (e) => {
            const submitBtn = e.target.querySelector('.submit-btn');
            submitBtn.style.transform = 'scale(0.95)';
            submitBtn.style.opacity = '0.9';
            setTimeout(() => {
                submitBtn.style.transform = '';
                submitBtn.style.opacity = '';
            }, 200);
        });

        // Keyboard Navigation
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft' && !prevBtn.disabled) {
                prevBtn.click();
            } else if (e.key === 'ArrowRight' && !nextBtn.disabled) {
                nextBtn.click();
            }
        });

        // Save Drawing State
        function saveDrawingState() {
            const drawingData = canvas.toDataURL();
            localStorage.setItem('savedDrawing', drawingData);
        }

        function loadDrawingState() {
            const savedDrawing = localStorage.getItem('savedDrawing');
            if (savedDrawing) {
                const img = new Image();
                img.onload = function() {
                    ctx.drawImage(img, 0, 0);
                };
                img.src = savedDrawing;
            }
        }

        // Auto-save drawing every 30 seconds
        setInterval(saveDrawingState, 30000);

        // Initial Setup
        window.addEventListener('load', () => {
            resizeCanvas();
            showQuestion(0);
            loadDrawingState();
            
            // Add active state to pen tool initially
            document.getElementById('penTool').classList.add('active');
        });

        // Progress Indicator
        function updateProgress() {
            const totalQuestions = questions.length;
            const progress = ((currentQuestion + 1) / totalQuestions) * 100;
            
            // You can add a progress bar to your HTML and update it here
            // For example:
            // document.getElementById('progressBar').style.width = `${progress}%`;
        }

        // Call updateProgress whenever question changes
        nextBtn.addEventListener('click', updateProgress);
        prevBtn.addEventListener('click', updateProgress);

        // Error Handling
        function handleDrawingError(error) {
            console.error('Drawing error:', error);
            alert('Çizim sırasında bir hata oluştu. Lütfen sayfayı yenileyin.');
        }

        // Wrap drawing operations in try-catch
        function safeDraw(e) {
            try {
                draw(e);
            } catch (error) {
                handleDrawingError(error);
            }
        }

        canvas.addEventListener('mousemove', safeDraw);
    </script>
</body>
</html>